name: Continuous Integration and Delivery

on: [push]

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx

jobs:
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkokut master
        uses: actions/checkout@v1
        
      - name: Add the private SSH key to ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          echo ====1====
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            echo $(pwd)
            cd /app/myhouse24
            echo $(pwd)
            ls --all
            #docker-compose -f docker-compose.prod.yml down
          ENDSSH

          rsync -ru $(pwd) root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app --delete
          echo =====2=====
          echo $(pwd)
          echo =====3=====
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'

            echo =====4=====
            echo $(pwd)
            echo =====5=====
            touch .env.prod
            echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .env.prod
            echo DEBUG=0 >> .env.prod
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env.prod
            echo EMAIL_SENDING_DEFAULT_FROM_EMAIL=${{ secrets.EMAIL_SENDING_DEFAULT_FROM_EMAIL }} >> .env.prod
            echo EMAIL_SENDING_EMAIL_HOST=${{ secrets.EMAIL_SENDING_EMAIL_HOST }} >> .env.prod
            echo EMAIL_SENDING_EMAIL_PORT=${{ secrets.EMAIL_SENDING_EMAIL_PORT }} >> .env.prod
            echo EMAIL_SENDING_EMAIL_HOST_USER=${{ secrets.EMAIL_SENDING_EMAIL_HOST_USER }} >> .env.prod
            echo EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }} >> .env.prod
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env.prod
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env.prod
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env.prod
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env.prod
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env.prod
            echo DATABASE=postgres >> .env.prod
            echo CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL }} >> .env.prod
            echo CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND }} >> .env.prod

            echo WEB_IMAGE=${{ env.WEB_IMAGE }} >> .env.prod
            echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env.prod
            echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env.prod
            echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env.prod

            touch .env.prod.db
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env.prod.db
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env.prod.db
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env.prod.db

            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN

            docker-compose -f docker-compose.prod.yml up --build -d
          ENDSSH
